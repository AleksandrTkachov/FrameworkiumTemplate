version: 2.1
jobs:
  build:
    working_directory: /tmp
    
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            cat /etc/os-release
            #wget https://github.com/bonigarcia/webdrivermanager/releases/download/webdrivermanager-5.3.1/webdrivermanager-5.3.1-fat.jar
            #java -jar webdrivermanager-5.3.1-fat.jar server

            # tar -xvzf geckodriver*
            # chmod +x geckodriver
            # ls -la
            # mv geckodriver /tmp
            # export PATH=$PATH:/tmp/geckodriver
            # echo $PATH
            #curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      # - run:
      #     name: Start Selenium
      #     command: |
      #       java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
      #     background: true
  ui-test:
      docker:
        - image: cimg/base:stable
      steps:
       - checkout
       - run:
             name: "Run UI test"
             command: |
               sudo apt-get update
               pwd
               ls -la
               sudo apt-get install openjdk-8-jdk -y
               sudo apt install firefox maven -y
               mvn clean verify -f pom.xml -Dtest=SearchTests* -Dheadless=true

       - run: ls /home/circleci/project/testng/video
       - run:
            name: Make history dir for allure
            command: mkdir target/allure-results/history
            when: always
       - run:
            name: Get previous artifact links
            command: curl https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PREVIOUS_BUILD_NUM/artifacts?circle-token=$artifacts | grep -o 'https:\/\/[^"]*Allure\/history\/.*\.json' > artifacts.txt || true
            when: always
       - run: cat artifacts.txt
       - run:
            name: Download history artfacts
            command: <artifacts.txt xargs -P4 -I % wget %?circle-token=$artifacts
            when: always
       - run:
            name: Rename and copy history artifacts to allure-result
            command: |
              mv history.json?circle-token=$artifacts history.json && mv history-trend.json?circle-token=$artifacts history-trend.json || true
              cp history.json target/allure-results/history/ && cp history-trend.json target/allure-results/history/ || true
              mv categories-trend.json?circle-token=$artifacts categories-trend.json && mv duration-trend.json?circle-token=$artifacts duration-trend.json || true
              cp categories-trend.json target/allure-results/history/ && cp duration-trend.json target/allure-results/history/ || true
              mv retry-trend.json?circle-token=$artifacts retry-trend.json || true
              cp retry-trend.json target/allure-results/history/ || true
            when: always

       - run:
            name: Allure Report
            command: mvn allure:report
            when: always

       - save_cache:
            paths:
              - ~/.m2
              - .allure
            key: $CIRCLE_PROJECT_REPONAME-{{ checksum "pom.xml" }}
            when: always
       - store_test_results:
            path: target/surefire-reports/junitreports
       - store_artifacts:
            path: target/surefire-reports
            #destination: report/testng-results
       - store_artifacts:
            path: target/allure-results
            #destination: report/allure-results
       - store_artifacts:
            path: target/site/allure-maven-plugin
            destination: allure

               
              #  sudo npm install -g allure-commandline
              #  sudo allure generate --clean
      #  - run:
      #        name: "generate allure report"
      #        command: |
      #          sudo npm install -g allure-commandline
      #          sudo allure generate --clean
      #        when: always

      #  - store_artifacts:
      #         path: /tmp/artifacts

      # steps:
      #   - checkout
      #   - run:
      #       name: "Run UI test"
      #       command: |
      #         sudo apt-get update
      #         pwd
      #         ls -la
      #         sudo apt-get install openjdk-8-jdk -y
      #         sudo apt install maven -y

      #         mvn clean verify -Dtest=SearchTests*    
      
        # - run:
        #     name: Start Selenium
        #     command: java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
        #     background: true 
workflows:
  build-application-workflow:
    jobs:
    - ui-test