version: 2.1
description: Orb providing support for [Allure Framework](https://github.com/allure-framework/allure2)
commands:
  install:
    description: Installs Allure Framework and registers it as /usr/local/bin/allure
    parameters:
      version:
        description: Allure version to use
        type: string
        default: 2.13.1
    steps:
      - run:
          name: Allure archive download
          command: curl -L https://github.com/allure-framework/allure2/releases/download/<< parameters.version >>/allure-commandline-<< parameters.version >>.zip -o /tmp/allure.zip
      - run:
          name: Archive extraction
          command: unzip /tmp/allure.zip
      - run:
          name: Allure installation
          command: sudo mv allure-<< parameters.version >> /usr/local/share/allure
      - run:
          name: Allure binary symlinking
          command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure
  report:
    description: Generates report using Allure Framework
    parameters:
      configuration-path:
        description: Path to Allure configuration, uses default one if omitted
        type: string
        default: /usr/local/share/allure/config/allure.yml
      target-path:
        description: Path for report directory
        type: string
        default: allure-report
      results-path:
        description: Path to directory with test results
        type: string
        default: allure-results
      artifact-path:
        description: Path that will be used when storing result as artifact
        type: string
        default: Report/Allure
    steps:
      - run:
          name: Allure report generation (<< parameters.results-path >> -> << parameters.target-path >>)
          command: |
            allure generate \
              --config << parameters.configuration-path >> \
              --report-dir << parameters.target-path >> \
              << parameters.results-path >>
      - store_artifacts:
          path: << parameters.target-path >>
          destination: << parameters.artifact-path >>
jobs:
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            cat /etc/os-release
            #wget https://github.com/bonigarcia/webdrivermanager/releases/download/webdrivermanager-5.3.1/webdrivermanager-5.3.1-fat.jar
            #java -jar webdrivermanager-5.3.1-fat.jar server

            # tar -xvzf geckodriver*
            # chmod +x geckodriver
            # ls -la
            # mv geckodriver /tmp
            # export PATH=$PATH:/tmp/geckodriver
            # echo $PATH
            #curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      # - run:
      #     name: Start Selenium
      #     command: |
      #       java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
      #     background: true
  ui-test:
      docker:
        - image: cimg/base:stable
      steps:
       - checkout
       - run:
             name: "Run UI test"
             command: |
               sudo apt-get update
               pwd
               ls -la
               sudo apt-get install openjdk-8-jdk -y
               sudo apt install firefox maven -y
               mvn clean verify -f pom.xml -Dtest=SearchTests* -Dheadless=true

      # steps:
      #   - checkout
      #   - run:
      #       name: "Run UI test"
      #       command: |
      #         sudo apt-get update
      #         pwd
      #         ls -la
      #         sudo apt-get install openjdk-8-jdk -y
      #         sudo apt install maven -y

      #         mvn clean verify -Dtest=SearchTests*    
      
        # - run:
        #     name: Start Selenium
        #     command: java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
        #     background: true 
workflows:
  build-application-workflow:
    jobs:
    - ui-test